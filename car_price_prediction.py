# -*- coding: utf-8 -*-
"""Car_Price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14lEKWmxAisvxp5NOppPeXLsjEBCILs0K
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

df = pd.read_csv('/content/car data.csv')

df.head()

df.isnull().sum()

df.shape

df.info()

sns.histplot(df['Selling_Price'], kde=True)
plt.title('Distribution of Selling Price')
plt.show()

print(df.Fuel_Type.value_counts())
print(df.Seller_Type.value_counts())
print(df.Transmission.value_counts())

df.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
df.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
df.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

df.head()

x = df.drop(['Car_Name','Selling_Price'],axis=1)
y = df['Selling_Price']

print(x)

print(y)

x_train,x_test,y_train,y_test = train_test_split(x,y ,test_size = 0.1, random_state=2)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

lin_reg_model = LinearRegression()

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(lin_reg_model, x_train, y_train, cv=5, scoring='r2')
print('Cross-validated R Squared:', np.mean(cv_scores))

lin_reg_model.fit(x_train, y_train)

# Prediction on traing data
training_data_prediction = lin_reg_model.predict(x_train)

# R Squred Error
error_score = metrics.r2_score(y_train,training_data_prediction)
print('R sqyred error:',error_score)

plt.scatter(y_train, training_data_prediction)
plt.xlabel('actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price Vs Predicted Price')
plt.show()

# Prediction on test data
test_data_prediction = lin_reg_model.predict(x_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Mean Absolute Error
mae = mean_absolute_error(y_test, test_data_prediction)
print('Mean Absolute Error:', mae)

# Mean Squared Error
mse = mean_squared_error(y_test, test_data_prediction)
print('Mean Squared Error:', mse)

# Root Mean Squared Error
rmse = np.sqrt(mse)
print('Root Mean Squared Error:', rmse)

# R Squred Error
error_score = metrics.r2_score(y_test,test_data_prediction)
print('R sqyred error:',error_score)

plt.scatter(y_test, test_data_prediction)
plt.xlabel('actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price Vs Predicted Price')
plt.show()

lasso_reg_model = Lasso()

lasso_reg_model.fit(x_train,y_train)

train_data_prediction = lasso_reg_model.predict(x_train)

# find error using r squred error
error_score = metrics.r2_score(y_train, train_data_prediction)
print('R Sqered Error :',error_score)

plt.scatter(y_train, train_data_prediction)
plt.xlabel('actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price Vs Predicted Price')
plt.show()

test_data_prediction = lasso_reg_model.predict(x_test)

# R squred Error
error_score = metrics.r2_score(y_test, test_data_prediction)
print('Squred error',error_score)

plt.scatter(y_test,test_data_prediction)
plt.xlabel("Predicted Point")
plt.ylabel("Actual Points")
plt.title("Predicted Vs Actual Points")
plt.show()

import joblib

# Save the linear regression model, Lasso model, and scaler
joblib.dump(lin_reg_model, 'linear_regression_model.pkl')
joblib.dump(lasso_reg_model, 'lasso_regression_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
